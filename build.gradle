import java.nio.file.Paths

plugins {
    id 'java'
    id 'jacoco'
    id "org.sonarqube" version "2.7.1"
    id "nebula.lint" version "16.7.0"
    id "org.asciidoctor.convert" version "1.5.3"
    id 'org.springframework.boot' version '2.2.2.RELEASE'
    id "io.spring.dependency-management" version "1.0.9.RELEASE"
}

repositories {
    mavenCentral()
}

group = 'com.kokozzang'
version = '1.0.0-SNAPSHOT'
sourceCompatibility = '11'
description = 'spring sample project'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    compileOnly'org.springframework.boot:spring-boot-starter-aop'

    implementation 'com.google.guava:guava:27.1-jre'
    implementation group: 'org.modelmapper', name: 'modelmapper', version: '2.3.2'

    compileOnly group: 'ch.qos.logback.contrib', name: 'logback-json-classic', version: '0.1.5'
    compileOnly group: 'ch.qos.logback.contrib', name: 'logback-jackson', version: '0.1.5'


    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'  exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'

    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

    asciidoctor 'org.springframework.restdocs:spring-restdocs-asciidoctor'

    runtimeOnly 'mysql:mysql-connector-java'

}


gradleLint.rules = ['dependency-parentheses']

File snippetsDir = file("$buildDir/generated-snippets")
boolean shouldTest = !project.hasProperty('skipTest')
boolean shouldDocumentation = true
if (!shouldTest) {
    shouldDocumentation = false
} else {
    shouldDocumentation = !project.hasProperty('noRestDocs')
}

test {
    onlyIf { shouldTest }

    outputs.dir snippetsDir
    useJUnitPlatform {}
}

task makeadoc {
    group = 'documentation'
    description = 'specification.adoc 템플릿을 사용하여 API adoc에 snippet을 조합한다.'
    dependsOn test
    onlyIf {shouldDocumentation}

    doLast {
        if (snippetsDir.exists()) {
            snippetsDir.eachDir {classDir ->
                file(classDir.canonicalPath).eachDir { methodDir ->
                    copy {
                        from('src/docs/template/') {
                            include('specification.adoc')
                        }
                        rename 'specification.adoc', methodDir.name + '.adoc'
                        into(Paths.get(snippetsDir.canonicalPath, classDir.name))

                        def fileList = file(methodDir).listFiles().collect{f -> return f.name}
                        def isPathParametersExists = fileList.contains("path-parameters.adoc")
                        def isRequestFieldsExists = fileList.contains("request-fields.adoc")
                        def isRequestParametersExists = fileList.contains("request-parameters.adoc")
                        def expandMap = [:]
                        expandMap.put("className", classDir.name)
                        expandMap.put("methodName", methodDir.name)
                        expandMap.put("isPathParametersExists", isPathParametersExists.toString())
                        expandMap.put("isRequestFieldsExists", isRequestFieldsExists.toString())
                        expandMap.put("isRequestParametersExists", isRequestParametersExists.toString())
                        expand(expandMap)
                    }
                }
            }
        }
    }
}

asciidoctor {
    group ='documentation'
    description = 'adoc파일을 html로 변환.'
    dependsOn makeadoc

    onlyIf {shouldDocumentation}

    inputs.dir snippetsDir
    attributes 'snippets': snippetsDir
}


bootJar {
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}
